<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://roastedchickenz.github.io/</id><title>This is a blog</title><subtitle>Just another blog on the internet.</subtitle> <updated>2023-02-10T05:12:02+00:00</updated> <author> <name>Tim</name> <uri>https://roastedchickenz.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://roastedchickenz.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://roastedchickenz.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> ¬© 2023 Tim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Uncrackable2</title><link href="https://roastedchickenz.github.io/posts/uncrackable2/" rel="alternate" type="text/html" title="Uncrackable2" /><published>2023-02-07T04:00:00+00:00</published> <updated>2023-02-07T04:00:00+00:00</updated> <id>https://roastedchickenz.github.io/posts/uncrackable2/</id> <content src="https://roastedchickenz.github.io/posts/uncrackable2/" /> <author> <name>Tim</name> </author> <category term="portable-computer" /> <summary> Today I want to share my experience playing Uncrackable2 by OWASP MASTG. Lets start! Tools I use Android Studio electric eel for debugger and android emulation jadx 1.4.5 for decompiling Uncrackable1 Decompiling To decompile, simply ./jadx UnCrackable-Level2.apk Root detection evasion I‚Äôm emulating a rooted android, so I get this Looking at the decompiled code, the root detecti... </summary> </entry> <entry><title>Uncrackable1</title><link href="https://roastedchickenz.github.io/posts/uncrackable1/" rel="alternate" type="text/html" title="Uncrackable1" /><published>2023-01-17T04:00:00+00:00</published> <updated>2023-01-17T04:00:00+00:00</updated> <id>https://roastedchickenz.github.io/posts/uncrackable1/</id> <content src="https://roastedchickenz.github.io/posts/uncrackable1/" /> <author> <name>Tim</name> </author> <category term="portable-computer" /> <summary> Today I want to share my experience playing Uncrackable1 by OWASP MASTG with some limitations I intentionally put. This limitation is: solve Uncrackable1 with only a debugger and nothing else! No Frida, Xposed, or similiar tools. Also, please note that different decompiler will yield different output so your results may vary. Lets start! Tools I use Android Studio electric eel for debugge... </summary> </entry> <entry><title>Playing with the Diva (android) - Part 2</title><link href="https://roastedchickenz.github.io/posts/Diva-android-part-2/" rel="alternate" type="text/html" title="Playing with the Diva (android) - Part 2" /><published>2023-01-07T16:00:00+00:00</published> <updated>2023-01-07T16:00:00+00:00</updated> <id>https://roastedchickenz.github.io/posts/Diva-android-part-2/</id> <content src="https://roastedchickenz.github.io/posts/Diva-android-part-2/" /> <author> <name>Tim</name> </author> <category term="portable-computer" /> <summary> Welcome to part 2 of my Diva-android posts. Lets jump right into it üòâÔ∏è 5. Insecure Data Storage - Part 3 I entered ‚Äúthisisauser‚Äù and ‚Äúnotauser‚Äù as test data. Once again, open /sources/jakhar/aseem/diva/InsecureDataStorage3Activity.java to see the source code we decompiled. Scanning through the source code, we see that the developer uses temp file this time. The name of the temp file is pre... </summary> </entry> <entry><title>Playing with the Diva (android) - Part 1</title><link href="https://roastedchickenz.github.io/posts/Diva-android/" rel="alternate" type="text/html" title="Playing with the Diva (android) - Part 1" /><published>2022-12-24T03:00:00+00:00</published> <updated>2023-01-07T16:46:40+00:00</updated> <id>https://roastedchickenz.github.io/posts/Diva-android/</id> <content src="https://roastedchickenz.github.io/posts/Diva-android/" /> <author> <name>Tim</name> </author> <category term="portable-computer" /> <summary> Today I‚Äôm going to share my experience playing diva-android for the first time. Diva-android is an intentionally vulnerable android app in an attempt to educate pentester on the basic of android pentesting and developer on secure coding. Diva has a total of 13 challenges. Lets just jump into it. Installation You can build from source by following the instruction here but I‚Äôm lazy so I‚Äôm using... </summary> </entry> <entry><title>Microcorruption - Cusco</title><link href="https://roastedchickenz.github.io/posts/microcorruption-cusco/" rel="alternate" type="text/html" title="Microcorruption - Cusco" /><published>2022-11-19T01:00:00+00:00</published> <updated>2022-11-19T01:00:00+00:00</updated> <id>https://roastedchickenz.github.io/posts/microcorruption-cusco/</id> <content src="https://roastedchickenz.github.io/posts/microcorruption-cusco/" /> <author> <name>Tim</name> </author> <category term="computer" /> <summary> This is my writeup for microcorruption level Cusco Let‚Äôs just jump to it. As always, start with ‚Äúb main‚Äù. The beginning is the same as the previous level, main function is replaced with the login function. Looking at the login function, we see the alert ‚Äúonly 8-16 characters‚Äù again. This might suggest that we have to do another overflow stuff. We also should check the function ‚Äútest_password... </summary> </entry> </feed>
